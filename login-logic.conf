
	failcheck = {
		successful->Pass();
		failure->Write("Bad {0}", variablename = "name") & FailCheck();
	};

	instances = {
		identify = HttpMethod() {
			post->Check():WwwForm() {
				username->TextField(pattern = "^[\\w|0-9|-|_]{2,60}$")failcheck;
				password->TextField(pattern = "^.{1,250}$")failcheck;
				mapped->CheckCheck() {
					failure->Write("Validation of inputs failed");
					successful->DataReader(f"queries/GetLoginByCredentials.sql", connection = "aglogin") {
						none->view.LoginFail;
						single->Return("identified");
					};
				};
			};
			get->view.LoginForm;
		};

		createaccount = DataReader(f"queries/Get Login by username.auto.sql", connection = "aglogin") {
			none->DataReader(f"queries/AddLoginCredentials.sql", connection = "aglogin") {
				none->view.RegisterFail;
				single->Return("done");
			};
			single->view.usernamenotunique;
		};

		create = Write("test") & HttpMethod() {
			post->Write("tost") & Check():WwwForm(fieldlist = [
				"username", 
				"password", 
				"repeatpassword", 
				"check"
			]) {
				username->TextField(pattern = "^[\\w|0-9|_]{2,60}$")failcheck;
				password->TextField(pattern = "^.{8,250}$")failcheck;
				repeatpassword->TextField(pattern = "^.{8,250}$")failcheck;
				check->TextField(pattern = "^gr(e|o)en$")failcheck;
				mapped->CheckCheck() {
					successful->Equals("password", to="repeatpassword") {
						successful->instances.createaccount;
						failure->Write("Password validation didn't pass") & view.RegisterForm;
					};
					failure->Write("Bad inputs");
				};
			};
			get->view.RegisterForm;
		};
	};
